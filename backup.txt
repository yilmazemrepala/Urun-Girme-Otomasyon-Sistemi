<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>Ürün Girme Otomasyon Sistemi</title>
		<link
			href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
			rel="stylesheet"
			integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
			crossorigin="anonymous" />
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
		<link rel="stylesheet" href="../css/style.css" />

		<style></style>
	</head>

	<body>
		<section>
			<nav class="navbar navbar-expand-sm bg-secondary bg-opacity-50">
				<div class="container-fluid d-flex mx-3">
					<h2 class="title">Ürün Girme Otomasyon Sistemi</h2>
					<div class="d-grid gap-2 d-md-flex justify-content-md-end">
						<button
							method="POST"
							onclick="createDatabase()"
							class="btn btn-outline-warning btn-lg"
							type="submit">
							Server Connection</button
						><button
							method="POST"
							onclick="addData()"
							class="btn btn-outline-success btn-lg"
							type="submit">
							Kaydet
						</button>
					</div>
				</div>
			</nav>
		</section>
		<!-- NAVBAR -->

		<!-- --------------------------------------------------------------------------------------------- -->

		<!-- Product and service description -->
		<section>
			<h4 class="ms-4 mt-4">Ürün ve Hizmet Tanımı</h4>
			<div class="ms-4 me-4 p-3 bg-light text-black rounded">
				<form class="row" action="/addData" id="addProduct" method="post">
					<div class="col-md-6">
						<label for="exampleFormControlInput1" class="form-label"
							>Ürün Adı</label
						>
						<input
							class="form-control"
							type="text"
							name="productName"
							id="productName"
							placeholder="Ürünün Başlığını Giriniz..."
							required />
					</div>
					<div class="col-md-6">
						<label class="form-label"> Ürün Tipi</label>
						<select class="form-select" name="productType">
							<option selected>Stoklu ürün</option>
							<option>Stoksuz Ürün (Hizmet/Danışmanlık)</option>
						</select>
					</div>
					<div class="col-md-6 mt-3">
						<label for="exampleFormControlTextarea1" class="form-label"
							>Ürün Açıklaması</label
						>
						<textarea
							class="form-control"
							placeholder="Ürünün açıklamasını giriniz..."
							name="productDescription"
							id="productDescription"
							rows="9"></textarea>
					</div>
					<script
						class="jsbin"
						src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script>
					<div class="col-md-3">
						<label class="form-label mt-3">Ürün Fotoğrafı</label>
						<div class="file-upload">
							<div class="image-upload-wrap">
								<input
									class="file-upload-input"
									name="productImage"
									type="file"
									onchange="readURL(this);"
									accept="image/*"
									required />
								<div class="drag-text">
									<h3>Fotoğraf YÜKLEMEK İÇİN TIKLAYINIZ</h3>
								</div>
							</div>
							<div class="file-upload-content">
								<img class="file-upload-image" src="#" alt="your image" />
								<div class="image-title-wrap mt-3">
									<button
										type="button"
										onclick="removeUpload()"
										class="remove-image">
										Kaldır
									</button>
								</div>
							</div>
						</div>
					</div>
					<div class="col-md-3 mt-3">
						<di class="row">
							<div class="col-md-12">
								<label for="exampleFormControlTextarea1" class="form-label"
									>Marka</label
								>
								<input
									class="form-control"
									type="text"
									placeholder="Marka giriniz..."
									name="brand"
									id="brand"
									required />

								<div class="col-md-12 mt-3">
									<label for="exampleFormControlTextarea1" class="form-label"
										>Stok Adedi</label
									>
									<input
										class="form-control"
										placeholder="Ürün stok durumunu giriniz..."
										type="number"
										name="stock"
										id="stock"
										required />
								</div>
							</div>
						</di>
					</div>
				</form>
			</div>
		</section>

		<!-- --------------------------------------------------------------------------------------------- -->

		<!-- Pricing -->
		<section>
			<h4 class="ms-4 mt-4">Fiyatlandırma</h4>
			<div class="ms-4 me-4 p-3 bg-light text-black rounded">
				<form class="row" action="/addData" method="post" id="addPrice">
					<div class="col-md-3 mt-3">
						<label for="exampleFormControlTextarea1" class="form-label">
							Satış Fiyatı</label
						>
						<input
							class="form-control"
							type="number"
							placeholder="Ürünün fiyatını giriniz..."
							name="price"
							id="price"
							required />
					</div>
					<div class="col-md-1 mt-3">
						<label>Para Birimi</label>
						<select class="form-select mt-2" name="currency" id="currency">
							<option selected>TL</option>
							<option>Dolar</option>
							<option>Euro</option>
						</select>
					</div>
					<div class="col-md-1 mt-3">
						<label for="exampleFormControlTextarea1" class="form-label">
							KDV Oranı <i class="bi bi-percent"></i
						></label>
						<input
							class="form-control"
							type="number"
							value="18"
							name="vatRate"
							id="vatRate"
							required />
					</div>
				</form>
			</div>
		</section>

		<!-- Dummy form -->
		<form
			id="mergedForm"
			style="display: none"
			action="/addData"
			method="post"></form>

		<!-- --------------------------------------------------------------------------------------------- -->

		<script src="/helpers/ui.js"></script>
		<script src="app.js"></script>
		<script>
			function createDatabase() {
				const xhr = new XMLHttpRequest();
				xhr.open("GET", "/createdb", true);
				xhr.send();
			}

			// -----------------------------------------------------------------
			function addData() {
				mergeForms();
			}

			function mergeForms() {
				var form1Inputs = document
					.getElementById("addProduct")
					.getElementsByTagName("input");
				var form2Inputs = document
					.getElementById("addPrice")
					.getElementsByTagName("input");
				var form1Select = document
					.getElementById("addProduct")
					.getElementsByTagName("select")[0];
				var form2Select = document
					.getElementById("addPrice")
					.getElementsByTagName("select")[0];
				var form1Textarea = document
					.getElementById("addProduct")
					.getElementsByTagName("textarea")[0];
				var mergedForm = document.getElementById("mergedForm");

				for (var i = 0; i < form1Inputs.length; i++) {
					var input = document.createElement("input");
					input.type = "hidden";
					input.name = form1Inputs[i].name;
					input.value = form1Inputs[i].value;
					mergedForm.appendChild(input);
				}

				for (var i = 0; i < form2Inputs.length; i++) {
					var input = document.createElement("input");
					input.type = "hidden";
					input.name = form2Inputs[i].name;
					input.value = form2Inputs[i].value;
					mergedForm.appendChild(input);
				}

				var select1 = document.createElement("input");
				select1.type = "hidden";
				select1.name = form1Select.name;
				select1.value = form1Select.value;
				mergedForm.appendChild(select1);

				var select2 = document.createElement("input");
				select2.type = "hidden";
				select2.name = form2Select.name;
				select2.value = form2Select.value;

				var textarea1 = document.createElement("textarea");
				textarea1.name = form1Textarea.name;
				textarea1.value = form1Textarea.value;
				mergedForm.appendChild(textarea1);

				mergedForm.appendChild(select2);

				mergedForm.submit();
			}

			// ---------------------------------------------------
		</script>
		<script
			class="jsbin"
			src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script>
		<script
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
			integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
			crossorigin="anonymous"></script>
	</body>
</html>


		<!-- --------------------------------------------------------------------------------------------- -->

SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT SCRİPT 

		<!-- --------------------------------------------------------------------------------------------- -->

		/* Bu kod örneği, Express.js kullanarak bir web uygulaması oluşturmak için kullanılan bir Node.js kodudur. Aşağıda kodun yaptığı işlemleri ve kullanılan modülleri açıkladım:

express: Express.js framework'ünü kullanmak için gerekli olan modül.
app: Express uygulamasını oluşturan ve yapılandıran nesne.
path: Dosya yollarını işlemek için kullanılan modül.
sql: MSSQL veritabanıyla iletişim kurmak için kullanılan modül.
Connection, Request, TYPES : tedious modülü ile MSSQL veritabanına bağlanmak ve sorguları yürütmek için kullanılan nesneler.
Express.js uygulaması yapılandırılırken ejs şablon motoru kullanıldığı belirtilmiştir.

Ana sayfa ("/") için GET isteği ele alınmış ve "index" şablonu render edilmiştir.

/css dizinine istek yapıldığında CSS dosyalarının sunulması sağlanmıştır.

/helpers dizini ve kök dizin ("") için statik dosya sunumu yapılmıştır.

/createdb yoluna GET isteği yapıldığında, veritabanı bağlantısı oluşturulup Products adında bir veritabanı oluşturulduğu veya var olan bir veritabanında Products tablosunun oluşturulduğu bir işlem gerçekleştirilmiştir.

/addProduct yoluna POST isteği yapıldığında, gelen veriler kullanılarak Products tablosuna bir ürün eklenmiştir.

Son olarak, uygulama 8080 portunda başlatılmıştır.

Bu kod örneği bir Express.js uygulamasının MSSQL veritabanıyla nasıl etkileşimde bulunabileceğini göstermektedir. Ancak, çalışması için mssql ve tedious modüllerinin yüklü olduğundan ve doğru veritabanı yapılandırmasının yapıldığından emin olmanız gerekmektedir. Ayrıca, gerekli veritabanı tablolarının ve bağlantı bilgilerinin doğru olduğundan emin olmalısınız. */
const express = require("express");
const app = express();
const path = require("path");
const sql = require("mssql");

// Frontend engine olarak EJS kullanılacağı belirtilir
app.set("view engine", "ejs");

// SQL işlemleri için teious modülünden yararlanıyoruz
const Connection = require("tedious").Connection;
const Request = require("tedious").Request;

// -------------------------------------------------------------------------------------

// Express Js'i dahil ettik, böylelikle local hostta index.html'i kullanabiliyoruz
app.get("/", function (req, res) {
	res.render("index");
});

app.listen(8080, function () {
	console.log("Server is running.. PORT: 8080");
});

// -------------------------------------------------------------------------------------
// css klasöründeki CSS dosyalarını static olarak ekliyoruz
app.use(
	"/css",
	express.static(path.join(__dirname, "/css"), {
		maxAge: 31557600000,
		setHeaders: function (res, path) {
			res.setHeader("Content-Type", "text/css");
		},
	})
);

// helpers klasöründeki js dosyalarını ekledik
app.use("/helpers", express.static(path.join(__dirname, "helpers")));

app.use(express.static(path.join(__dirname, "")));

// ------------------------------------------------------------------------------------------------------------

// Veritabanı oluşturma rotası
app.get("/createdb", function (req, res) {
	// Veritabanı bağlantı bilgileri

	const config = {
		server: "localhost",
		database: "master",
		port: 1433,
		authentication: {
			type: "default",
			options: {
				userName: "sa",
				password: "1234",
			},
		},
		options: {
			encrypt: true,
			trustServerCertificate: true,
			enableArithAbort: true,
		},
	};

	// Veritabanı bağlantısı
	sql.connect(config, function (err) {
		if (err) throw err;

		// Veritabanı sorgusu
		const query = "CREATE DATABASE Products";

		// Veritabanı sorgusunu çalıştırma
		sql.query(query, function (err, result) {
			if (err) throw err;

			console.log("Veritabanı oluşturuldu!");
			res.send("Veritabanı oluşturuldu!");
		});
	});
});


